<!DOCTYPE html>
<html lang="en-GB"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Part 1 – Testing a Single Architecture Component – Embedded Systems</title>
<meta name="robots" content="max-image-preview:large">
<link rel="dns-prefetch" href="https://s.w.org/">
<link rel="alternate" type="application/rss+xml" title="Embedded Systems » Feed" href="https://blogs.plymouth.ac.uk/embedded-systems/feed/">
<link rel="alternate" type="application/rss+xml" title="Embedded Systems » Comments Feed" href="https://blogs.plymouth.ac.uk/embedded-systems/comments/feed/">
<script>
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blogs.plymouth.ac.uk\/embedded-systems\/wp-includes\/js\/wp-emoji-release.min.js?ver=5fa31563dcb904c15e3c37b5836f7c3d"}};
/*! This file is auto-generated */
!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
</script><script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/wp-emoji-release.min.js" type="text/javascript" defer="defer"></script>
<style>
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 0.07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel="stylesheet" id="wp-quicklatex-format-css" href="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/quicklatex-format.css" media="all">
<link rel="stylesheet" id="wp-block-library-css" href="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/style.min.css" media="all">
<style id="wp-block-library-theme-inline-css">
.wp-block-audio figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-audio figcaption{color:hsla(0,0%,100%,.65)}.wp-block-code>code{font-family:Menlo,Consolas,monaco,monospace;color:#1e1e1e;padding:.8em 1em;border:1px solid #ddd;border-radius:4px}.wp-block-embed figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-embed figcaption{color:hsla(0,0%,100%,.65)}.blocks-gallery-caption{color:#555;font-size:13px;text-align:center}.is-dark-theme .blocks-gallery-caption{color:hsla(0,0%,100%,.65)}.wp-block-image figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-image figcaption{color:hsla(0,0%,100%,.65)}.wp-block-pullquote{border-top:4px solid;border-bottom:4px solid;margin-bottom:1.75em;color:currentColor}.wp-block-pullquote__citation,.wp-block-pullquote cite,.wp-block-pullquote footer{color:currentColor;text-transform:uppercase;font-size:.8125em;font-style:normal}.wp-block-quote{border-left:.25em solid;margin:0 0 1.75em;padding-left:1em}.wp-block-quote cite,.wp-block-quote footer{color:currentColor;font-size:.8125em;position:relative;font-style:normal}.wp-block-quote.has-text-align-right{border-left:none;border-right:.25em solid;padding-left:0;padding-right:1em}.wp-block-quote.has-text-align-center{border:none;padding-left:0}.wp-block-quote.is-large,.wp-block-quote.is-style-large,.wp-block-quote.is-style-plain{border:none}.wp-block-search .wp-block-search__label{font-weight:700}.wp-block-group:where(.has-background){padding:1.25em 2.375em}.wp-block-separator{border:none;border-bottom:2px solid;margin-left:auto;margin-right:auto;opacity:.4}.wp-block-separator:not(.is-style-wide):not(.is-style-dots){width:100px}.wp-block-separator.has-background:not(.is-style-dots){border-bottom:none;height:1px}.wp-block-separator.has-background:not(.is-style-wide):not(.is-style-dots){height:2px}.wp-block-table thead{border-bottom:3px solid}.wp-block-table tfoot{border-top:3px solid}.wp-block-table td,.wp-block-table th{padding:.5em;border:1px solid;word-break:normal}.wp-block-table figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-table figcaption{color:hsla(0,0%,100%,.65)}.wp-block-video figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-video figcaption{color:hsla(0,0%,100%,.65)}.wp-block-template-part.has-background{padding:1.25em 2.375em;margin-top:0;margin-bottom:0}
</style>
<style id="global-styles-inline-css">
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #FFFFFF;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--dark-gray: #28303D;--wp--preset--color--gray: #39414D;--wp--preset--color--green: #D1E4DD;--wp--preset--color--blue: #D1DFE4;--wp--preset--color--purple: #D1D1E4;--wp--preset--color--red: #E4D1D1;--wp--preset--color--orange: #E4DAD1;--wp--preset--color--yellow: #EEEADD;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--gradient--purple-to-yellow: linear-gradient(160deg, #D1D1E4 0%, #EEEADD 100%);--wp--preset--gradient--yellow-to-purple: linear-gradient(160deg, #EEEADD 0%, #D1D1E4 100%);--wp--preset--gradient--green-to-yellow: linear-gradient(160deg, #D1E4DD 0%, #EEEADD 100%);--wp--preset--gradient--yellow-to-green: linear-gradient(160deg, #EEEADD 0%, #D1E4DD 100%);--wp--preset--gradient--red-to-yellow: linear-gradient(160deg, #E4D1D1 0%, #EEEADD 100%);--wp--preset--gradient--yellow-to-red: linear-gradient(160deg, #EEEADD 0%, #E4D1D1 100%);--wp--preset--gradient--purple-to-red: linear-gradient(160deg, #D1D1E4 0%, #E4D1D1 100%);--wp--preset--gradient--red-to-purple: linear-gradient(160deg, #E4D1D1 0%, #D1D1E4 100%);--wp--preset--duotone--dark-grayscale: url('#wp-duotone-dark-grayscale');--wp--preset--duotone--grayscale: url('#wp-duotone-grayscale');--wp--preset--duotone--purple-yellow: url('#wp-duotone-purple-yellow');--wp--preset--duotone--blue-red: url('#wp-duotone-blue-red');--wp--preset--duotone--midnight: url('#wp-duotone-midnight');--wp--preset--duotone--magenta-yellow: url('#wp-duotone-magenta-yellow');--wp--preset--duotone--purple-green: url('#wp-duotone-purple-green');--wp--preset--duotone--blue-orange: url('#wp-duotone-blue-orange');--wp--preset--font-size--small: 18px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 24px;--wp--preset--font-size--x-large: 42px;--wp--preset--font-size--extra-small: 16px;--wp--preset--font-size--normal: 20px;--wp--preset--font-size--extra-large: 40px;--wp--preset--font-size--huge: 96px;--wp--preset--font-size--gigantic: 144px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
</style>
<link rel="stylesheet" id="twenty-twenty-one-style-css" href="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/style.css" media="all">
<style id="twenty-twenty-one-style-inline-css">
:root{--global--color-background: #eeeeee;--global--color-primary: #000;--global--color-secondary: #000;--button--color-background: #000;--button--color-text-hover: #000;}
</style>
<link rel="stylesheet" id="twenty-twenty-one-print-style-css" href="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/print.css" media="print">
<script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/jquery.min.js" id="jquery-core-js"></script>
<script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/jquery-migrate.min.js" id="jquery-migrate-js"></script>
<script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/wp-quicklatex-frontend.js" id="wp-quicklatex-frontend-js"></script>
<link rel="https://api.w.org/" href="https://blogs.plymouth.ac.uk/embedded-systems/wp-json/"><link rel="alternate" type="application/json" href="https://blogs.plymouth.ac.uk/embedded-systems/wp-json/wp/v2/pages/32"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blogs.plymouth.ac.uk/embedded-systems/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://blogs.plymouth.ac.uk/embedded-systems/wp-includes/wlwmanifest.xml"> 

<link rel="canonical" href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-1-single-architecture-test/">
<link rel="shortlink" href="https://blogs.plymouth.ac.uk/embedded-systems/?p=32">
<link rel="alternate" type="application/json+oembed" href="https://blogs.plymouth.ac.uk/embedded-systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblogs.plymouth.ac.uk%2Fembedded-systems%2Ffpga-and-vhdl%2Ftest-benches%2Fpart-1-single-architecture-test%2F">
<link rel="alternate" type="text/xml+oembed" href="https://blogs.plymouth.ac.uk/embedded-systems/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblogs.plymouth.ac.uk%2Fembedded-systems%2Ffpga-and-vhdl%2Ftest-benches%2Fpart-1-single-architecture-test%2F&amp;format=xml">
<style id="custom-background-css">
body.custom-background { background-color: #eeeeee; }
</style>
	<style>:is([id*='google_ads_iframe'],[id*='taboola-'],.taboolaHeight,.taboola-placeholder,#top-ad,#credential_picker_container,#credentials-picker-container,#credential_picker_iframe,[id*='google-one-tap-iframe'],#google-one-tap-popup-container,.google-one-tap__module,.google-one-tap-modal-div,#amp_floatingAdDiv,#ez-content-blocker-container) {display:none!important;min-height:0!important;height:0!important;}</style></head>

<body data-rsssl="1" class="page-template-default page page-id-32 page-child parent-pageid-30 custom-background wp-custom-logo wp-embed-responsive is-light-theme has-background-white singular has-main-navigation no-widgets">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-dark-grayscale"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0 0.49803921568627"></feFuncR><feFuncG type="table" tableValues="0 0.49803921568627"></feFuncG><feFuncB type="table" tableValues="0 0.49803921568627"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-grayscale"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0 1"></feFuncR><feFuncG type="table" tableValues="0 1"></feFuncG><feFuncB type="table" tableValues="0 1"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-purple-yellow"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0.54901960784314 0.98823529411765"></feFuncR><feFuncG type="table" tableValues="0 1"></feFuncG><feFuncB type="table" tableValues="0.71764705882353 0.25490196078431"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-blue-red"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0 1"></feFuncR><feFuncG type="table" tableValues="0 0.27843137254902"></feFuncG><feFuncB type="table" tableValues="0.5921568627451 0.27843137254902"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-midnight"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0 0"></feFuncR><feFuncG type="table" tableValues="0 0.64705882352941"></feFuncG><feFuncB type="table" tableValues="0 1"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-magenta-yellow"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0.78039215686275 1"></feFuncR><feFuncG type="table" tableValues="0 0.94901960784314"></feFuncG><feFuncB type="table" tableValues="0.35294117647059 0.47058823529412"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-purple-green"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0.65098039215686 0.40392156862745"></feFuncR><feFuncG type="table" tableValues="0 1"></feFuncG><feFuncB type="table" tableValues="0.44705882352941 0.4"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;"><defs><filter id="wp-duotone-blue-orange"><feColorMatrix color-interpolation-filters="sRGB" type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 "></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0.098039215686275 1"></feFuncR><feFuncG type="table" tableValues="0 0.66274509803922"></feFuncG><feFuncB type="table" tableValues="0.84705882352941 0.41960784313725"></feFuncB><feFuncA type="table" tableValues="1 1"></feFuncA></feComponentTransfer><feComposite in2="SourceGraphic" operator="in"></feComposite></filter></defs></svg><div id="page" class="site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	
<header id="masthead" class="site-header has-logo has-title-and-tagline has-menu">

	
	<div class="site-logo"><a href="https://blogs.plymouth.ac.uk/embedded-systems/" class="custom-logo-link" rel="home"><img width="300" height="64" src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/wordpress-logo.png" class="custom-logo" alt="Embedded Systems"></a></div>

<div class="site-branding">

	
						<p class="site-title"><a href="https://blogs.plymouth.ac.uk/embedded-systems/">Embedded Systems</a></p>
			
			<p class="site-description">
			Just another Plymouth University Blogs site		</p>
	</div><!-- .site-branding -->
	
	<nav id="site-navigation" class="primary-navigation" aria-label="Primary menu">
		<div class="menu-button-container">
			<button id="primary-mobile-menu" class="button" aria-controls="primary-menu-list" aria-expanded="false">
				<span class="dropdown-icon open">Menu					<svg class="svg-icon" width="24" height="24" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M4.5 6H19.5V7.5H4.5V6ZM4.5 12H19.5V13.5H4.5V12ZM19.5 18H4.5V19.5H19.5V18Z" fill="currentColor"></path></svg>				</span>
				<span class="dropdown-icon close">Close					<svg class="svg-icon" width="24" height="24" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M12 10.9394L5.53033 4.46973L4.46967 5.53039L10.9393 12.0001L4.46967 18.4697L5.53033 19.5304L12 13.0607L18.4697 19.5304L19.5303 18.4697L13.0607 12.0001L19.5303 5.53039L18.4697 4.46973L12 10.9394Z" fill="currentColor"></path></svg>				</span>
			</button><!-- #primary-mobile-menu -->
		</div><!-- .menu-button-container -->
		<div class="primary-menu-container"><ul id="primary-menu-list" class="menu-wrapper"><li id="menu-item-880" class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor current-menu-ancestor current_page_ancestor menu-item-has-children menu-item-880"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/">FPGAs and VHDL</a><button class="sub-menu-toggle" aria-expanded="false" onclick="twentytwentyoneExpandSubMenu(this)"><span class="icon-plus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18 11.2h-5.2V6h-1.6v5.2H6v1.6h5.2V18h1.6v-5.2H18z" fill="currentColor"></path></svg></span><span class="icon-minus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 11h12v2H6z" fill="currentColor"></path></svg></span><span class="screen-reader-text">Open menu</span></button>
<ul class="sub-menu">
	<li id="menu-item-881" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-881"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/getting-started-with-quartus-v16-1/">Getting Started with Quartus (v16.1)</a>
	<ul class="sub-menu">
		<li id="menu-item-882" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-882"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/getting-started-with-quartus-v16-1/creating-a-quartus-project-from-scratch/">Creating a Quartus Project from Scratch</a>
		<ul class="sub-menu">
			<li id="menu-item-883" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-883"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/getting-started-with-quartus-v16-1/using-vector-waveform-files/">Using Vector Waveform Files</a></li>
			<li id="menu-item-884" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-884"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/getting-started-with-quartus-v16-1/using-modelsim-for-interactive-simulation/">Using ModelSim for Interactive Simulation</a></li>
			<li id="menu-item-885" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-885"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/getting-started-with-quartus-v16-1/help-with-programming-and-simulation/">Help with Programming and Simulation</a></li>
		</ul>
</li>
	</ul>
</li>
	<li id="menu-item-886" class="menu-item menu-item-type-post_type menu-item-object-page current-page-ancestor current-menu-ancestor current-menu-parent current-page-parent current_page_parent current_page_ancestor menu-item-has-children menu-item-886"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/">Test Benches</a>
	<ul class="sub-menu">
		<li id="menu-item-887" class="menu-item menu-item-type-post_type menu-item-object-page current-menu-item page_item page-item-32 current_page_item menu-item-887"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-1-single-architecture-test/" aria-current="page">Part 1 – Testing a Single Architecture Component</a></li>
		<li id="menu-item-888" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-888"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-2-multiple-architectures/">Part 2 – Multiple Architectures</a></li>
		<li id="menu-item-889" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-889"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-3-automatic-testing-with-assert/">Part 3 – Automatic Testing with ‘assert’</a></li>
		<li id="menu-item-890" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-890"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-4-testing-with-simulated-timing/">Part 4 – Testing with Simulated Timing</a></li>
		<li id="menu-item-891" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-891"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-5-timing-checks/">Part 5 – Timing Checks</a></li>
		<li id="menu-item-892" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-892"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-6-modelling-and-testing-synchronous-systems/">Part 6 – Modelling and Testing Synchronous Systems</a></li>
	</ul>
</li>
	<li id="menu-item-893" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-893"><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/testing-understanding-the-scfifo-megafunction/">Testing / Understanding the FIFO (Intel FPGA IP)</a></li>
</ul>
</li>
<li id="menu-item-895" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-895"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/">Microcontrollers</a><button class="sub-menu-toggle" aria-expanded="false" onclick="twentytwentyoneExpandSubMenu(this)"><span class="icon-plus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18 11.2h-5.2V6h-1.6v5.2H6v1.6h5.2V18h1.6v-5.2H18z" fill="currentColor"></path></svg></span><span class="icon-minus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 11h12v2H6z" fill="currentColor"></path></svg></span><span class="screen-reader-text">Open menu</span></button>
<ul class="sub-menu">
	<li id="menu-item-896" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-896"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/">mbed-os</a>
	<ul class="sub-menu">
		<li id="menu-item-897" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-897"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/">Courses</a>
		<ul class="sub-menu">
			<li id="menu-item-898" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-898"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/">Level 4 – Embedded Systems in Context (ToC)</a>
			<ul class="sub-menu">
				<li id="menu-item-899" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-899"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/foreward/">FOREWARD</a></li>
				<li id="menu-item-900" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-900"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-1-digital-output/">Topic 1 – Digital Output</a></li>
				<li id="menu-item-901" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-901"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-2-potential-dividers-problem-based-learning-task/">Topic 2 – Potential Dividers (Problem Based Learning task)</a></li>
				<li id="menu-item-902" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-902"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-3-digital-inputs-and-multiple-outputs/">Topic 3 – Digital Inputs and Multiple Outputs</a></li>
				<li id="menu-item-903" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-903"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-4-analogue-input/">Topic 4 – Analogue Input</a>
				<ul class="sub-menu">
					<li id="menu-item-904" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-904"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-4-analogue-input/task-4-1-2-solution/">Task 4.1.2 Solution</a></li>
				</ul>
</li>
				<li id="menu-item-953" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-953"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/embedded-systems-in-context-level-4/topic-5-analogue-output/">Topic 5 – Analogue Output (introduction)</a></li>
			</ul>
</li>
			<li id="menu-item-905" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-905"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/">Level 5 – Embedded and Real Time Systems</a>
			<ul class="sub-menu">
				<li id="menu-item-906" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-906"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/forward/">Forward</a></li>
				<li id="menu-item-907" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-907"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/review-of-mbed/">Review of Mbed</a></li>
				<li id="menu-item-908" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-908"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/managing-multiple-inputs-and-outputs/">Managing Multiple Inputs and Outputs</a></li>
				<li id="menu-item-909" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-909"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/performing-real-time-tasks-with-interrupts/">Performing Real-Time Tasks with Interrupts</a></li>
				<li id="menu-item-910" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-910"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-5-embedded-and-real-time-systems/analogue-interfacing-real-time-data-conversion/">Analogue Interfacing – Real Time Data Conversion</a></li>
			</ul>
</li>
			<li id="menu-item-911" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-911"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/mbed-os-2/courses/level-6-advanced-embedded-programming/">Level 6 – Advanced Embedded Programming</a></li>
		</ul>
</li>
		<li id="menu-item-912" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-912"><a href="https://blogs.plymouth.ac.uk/embedded-systems/microcontrollers/stm32-and-cmsis/">STM32 and CMSIS</a></li>
	</ul>
</li>
</ul>
</li>
<li id="menu-item-914" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-914"><a href="https://blogs.plymouth.ac.uk/embedded-systems/real-time-programming-and-analogue-io/">Real-Time Programming and Analogue I/O</a></li>
<li id="menu-item-931" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-931"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/">Glossary of Terms</a><button class="sub-menu-toggle" aria-expanded="false" onclick="twentytwentyoneExpandSubMenu(this)"><span class="icon-plus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18 11.2h-5.2V6h-1.6v5.2H6v1.6h5.2V18h1.6v-5.2H18z" fill="currentColor"></path></svg></span><span class="icon-minus"><svg class="svg-icon" width="18" height="18" aria-hidden="true" role="img" focusable="false" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 11h12v2H6z" fill="currentColor"></path></svg></span><span class="screen-reader-text">Open menu</span></button>
<ul class="sub-menu">
	<li id="menu-item-916" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-916"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/analogue-to-digital-converter-adc-glossary-entry/">Analogue to Digital Converter (ADC) – (Glossary Entry)</a></li>
	<li id="menu-item-917" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-917"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/constant-voltage-source-glossary-item/">Constant Voltage Source (Glossary Item)</a></li>
	<li id="menu-item-918" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-918"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/digital-signal-glossary-entry/">Digital Signal (Glossary Entry)</a></li>
	<li id="menu-item-919" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-919"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/do-while-loop-glossary-entry/">do-while loop (Glossary Entry)</a></li>
	<li id="menu-item-920" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-920"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/for-loop-glossary-entry/">for-loop (Glossary Entry)</a></li>
	<li id="menu-item-921" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-921"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/h-bridge-glossary-entry/">H-Bridge (Glossary Entry)</a></li>
	<li id="menu-item-922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-922"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/led-light-emitting-diode-glossary-entry-tbd/">LED – Light Emitting Diode (Glossary Entry)</a></li>
	<li id="menu-item-923" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-923"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/nucleo-board-glossary-entry/">Nucleo Board (Glossary Entry)</a></li>
	<li id="menu-item-924" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-924"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/prototyping-board-glossary-entry/">Prototyping Board (Glossary Entry)</a></li>
	<li id="menu-item-925" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-925"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/push-to-make-switch-glossary-entry/">Push to Make Switch (Glossary Entry)</a></li>
	<li id="menu-item-926" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-926"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/resistor-glossary-entry/">Resistor (Glossary Entry)</a></li>
	<li id="menu-item-927" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-927"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/scanf-glossary-entry/">scanf (Glossary Entry)</a></li>
	<li id="menu-item-928" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-928"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/while-loop-glossary-entry/">While-Loop (Glossary Entry)</a></li>
	<li id="menu-item-929" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-929"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/glossary/">Analogue Signals (Glossary Entry)</a></li>
	<li id="menu-item-932" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-932"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/compiler-glossary-entry/">Compiler (Glossary Entry)</a></li>
	<li id="menu-item-933" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-933"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/logical-or-glossary-entry/">Logical OR (Glossary Entry)</a></li>
	<li id="menu-item-934" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-934"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/logical-and-glossary-entry/">Logical AND (Glossary Entry)</a></li>
	<li id="menu-item-935" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-935"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/logical-not-glossary-entry/">Logical NOT (Glossary Entry)</a></li>
	<li id="menu-item-936" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-936"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/logical-xor-glossary-entry/">Logical XOR (Glossary Entry)</a></li>
	<li id="menu-item-937" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-937"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/logical-shift-glossary-entry/">Logical Shift (Glossary Entry)</a></li>
	<li id="menu-item-938" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-938"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/arithmetic-shift-glossary-entry/">Arithmetic Shift (Glossary Entry)</a></li>
	<li id="menu-item-939" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-939"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/potentiometer-glossary-entry/">Potentiometer (Glossary Entry)</a></li>
	<li id="menu-item-940" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-940"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/hysteresis-and-the-schmitt-trigger-glossary-entry/">Hysteresis and the Schmitt Trigger (Glossary Entry)</a></li>
	<li id="menu-item-941" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-941"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/pulse-width-modulation-pwm-glossary-entry/">Pulse Width Modulation (PWM) – (Glossary Entry)</a></li>
	<li id="menu-item-942" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-942"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/digital-to-analogue-converter-dac-glossary-entry/">Digital to Analogue Converter (DAC) – (Glossary Entry)</a></li>
	<li id="menu-item-943" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-943"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/most-significant-bit-msb-glossary-entry/">Most Significant Bit (msb) – (Glossary Entry)</a></li>
	<li id="menu-item-944" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-944"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/if-else-if-else-statement-glossary-entry/">if-else if-else statement (Glossary Entry)</a></li>
	<li id="menu-item-945" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-945"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/least-significant-bit-lsb-glossary-entry/">Least Significant Bit (lsb) – (Glossary Entry)</a></li>
	<li id="menu-item-946" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-946"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/array-glossary-entry-2/">Array – (Glossary Entry)</a></li>
	<li id="menu-item-947" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-947"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/switch-case-statement-glossary-entry/">Switch-Case statement (Glossary Entry)</a></li>
	<li id="menu-item-948" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-948"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/array-glossary-entry/">Array (Glossary Entry)</a></li>
	<li id="menu-item-949" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-949"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/interrupt-glossary-entry/">Interrupt (Glossary Entry)</a></li>
	<li id="menu-item-950" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-950"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/light-dependent-resistor-ldr-glossary-entry/">Light Dependent Resistor (LDR) – (Glossary Entry)</a></li>
	<li id="menu-item-951" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-951"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/race-conditions-glossary-entry/">Race Conditions (Glossary Entry)</a></li>
	<li id="menu-item-952" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-952"><a href="https://blogs.plymouth.ac.uk/embedded-systems/glossary-2/digital-signal-processing-dsp-glossary-entry/">Digital Signal Processing (DSP) – (Glossary Entry)</a></li>
</ul>
</li>
</ul></div>	</nav><!-- #site-navigation -->

</header><!-- #masthead -->

	<div id="content" class="site-content">
		<div id="primary" class="content-area">
			<main id="main" class="site-main">

<article id="post-32" class="post-32 page type-page status-publish hentry entry">

			<header class="entry-header alignwide">
			<h1 class="entry-title">Part 1 – Testing a Single Architecture Component</h1>					</header><!-- .entry-header -->
	
	<div class="entry-content">
		<h2>Defining a Component</h2>
<p>When you create a component, you specify the <strong>entity</strong> and at least one <strong>architecture</strong>.</p>
<ul>
<li>The entity defines the inputs and output signals.</li>
<li>The entity describes the logical relationship between the input and output signals.</li>
</ul>
<p>You can think of an entity as the description of a device, as viewed from the outside. For example:</p>
<pre class="theme:xcode lang:default mark:5 highlight:0 decode:true">library ieee; 
use ieee.std_logic_1164.all;

-- Component 1 - very simple device that performs a logical OR on three single bit inputs
entity comp1 is
 port( A: in std_logic;
 B: in std_logic;
 C: in std_logic;
 Y: out std_logic
);
end comp1;</pre>
<p>The highlighted line is the start of the entity declaration.</p>
<ul>
<li>The name of the entity is <strong>comp1</strong></li>
<li>This entity has a single architecture <strong>inst1</strong></li>
</ul>
<p>We can represent this component visually as follows:</p>
<figure id="attachment_33" aria-describedby="caption-attachment-33" style="width: 300px" class="wp-caption alignnone"><img class="size-medium wp-image-33" src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/comp1-300x282.png" alt="" width="300" height="282" srcset="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/comp1-300x282.png 300w, Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/comp1-260x244.png 260w, Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/comp1-160x150.png 160w, Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/comp1.png 357w" sizes="(max-width: 300px) 100vw, 300px"><figcaption id="caption-attachment-33" class="wp-caption-text">Component showing input signals A,B and C with an output signal Y</figcaption></figure>
<p>Below the entity is the architecture that contains the logic</p>
<pre class="lang:default highlight:0 decode:true">--This component only has one architecture
architecture inst1 of comp1 is
begin
 Y &lt;= A or B or C;
end inst1;</pre>
<p>We could use this component in a design, synthesise it and test on 
real hardware. However, it is advisable (where possible) to simulate it 
first. Tools included with Altera Quartus II allow us to do this using 
either:</p>
<ul>
<li>Vector Waveform File (simulation)</li>
<li>SignalTap on Hardware</li>
<li>Running a “Test Bench” in ModelSim (simulation)</li>
</ul>
<p>This article is concerned with the latter approach as it provides a 
very rich array of testing facilities that would be hard to replicate on
 hardware.</p>
<h2>Writing a Testbench</h2>
<p>A testbench is simple a VHDL component with <em>no input or output signals</em>.
 All signals are in fact internal. This might seem strange at first, as 
you will see, a test-bench is never intended to be run on hardware – it 
is purely for simulation and test. What’s more, there are conditions you
 can detect in simulation that would be very hard to spot in hardware 
(as we will see later).</p>
<p>Let’s now look at a simple test bench for the <strong>comp1</strong> component</p>
<pre class="lang:default highlight:0 decode:true">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity comp1_test is
--NOTHING TO SEE HERE
end comp1_test;

architecture inst1 of comp1_test is

--Declare components
 component comp1 
  port( A: in std_logic;
        B: in std_logic;
        C: in std_logic;
        Y: out std_logic);
 end component;
 
 --Declare signals
 signal AA : std_logic := '0';
 signal BB : std_logic := '0';
 signal CC : std_logic := '0';
 signal YY : std_logic := '0';


begin
 --Instantiate a component of type comp1
 u1: comp1 PORT MAP (
 A =&gt; AA,
 B =&gt; BB,
 C =&gt; CC,
 Y =&gt; YY
 );

comp1_process:
 process 
  variable count : std_logic_vector(2 downto 0);
 begin 
  --Exhaustive test
  for idx in 0 to 7 loop
   --Convert integer idx to std_logic
   count := std_logic_vector(to_unsigned(idx,3));

   --Assign internal signals to the individual bits of count
   AA &lt;= count(0);
   BB &lt;= count(1);
   CC &lt;= count(2);

   --Wait for 20ns (also prompts signals to update)
   wait for 20 ns;
  end loop;
 
  --End of test is to wait forever
  wait;
 end process;
 
end inst1;</pre>
<p>Let’s now break this down into sections to help understand what is happening.</p>
<h3>Entity</h3>
<p>All test bench components have an empty entity, as shown here</p>
<pre class="lang:default highlight:0 decode:true">entity comp1_test is
 --NOTHING TO SEE HERE 
end comp1_test;</pre>
<p>Remember that we are creating an independent component <strong>comp1_test</strong>&nbsp;(comp1_test.vhd) to test the component <strong>comp1</strong> (comp1.vhd). Whereas comp1.vhd might feature in a real design, comp1_test.vhd will not.</p>
<h3>Architecture</h3>
<p>The code to perform the test is written in the architecture of the 
testbench. The principle is to use structural VHDL to do the following:</p>
<ul>
<li>declare all components and signals (before the begin statement)</li>
<li>instantiate the component under test.</li>
<li>connect its inputs and outputs to internal signals</li>
<li>stimulate those internal signals</li>
<li>check the output agrees with the expected results</li>
</ul>
<p>Let’s look at each aspect in turn.</p>
<h4>Declare the component under test</h4>
<p>Before we start, we must declare the component we wish to test in the
 architecture of the test bench (before the begin statement). Note that 
it is assumed that the component name is the same as the filename, and 
that it is in the same working folder.</p>
<pre class="lang:default highlight:0 decode:true">component comp1 
 port( A: in std_logic;
       B: in std_logic;
       C: in std_logic;
       Y: out std_logic);
end component;
</pre>
<p>This tells the VHDL compiler about the component and it’s input / 
output signal names and types. Note that signal names must match the 
original (I tend to copy and paste the port declaration from the 
original file).</p>
<h4>Declare internal signals</h4>
<p>Next we need some signals to stimulate (set and reset over time) and 
monitor. These will eventually be connected to the inputs and outputs of
 the component under test.</p>
<pre class="lang:default highlight:0 decode:true"> --Declare signals
 signal AA : std_logic := '0';
 signal BB : std_logic := '0';
 signal CC : std_logic := '0';
 signal YY : std_logic := '0';</pre>
<p>Note that these signals are only visible to the architecture body of 
the test bench. I’ve initialized these signals to ‘0’ at the start of 
simulation as the device under test has no reset capability. This is 
entirely optional.</p>
<h4>Instantiate a component under test</h4>
<p>Imagine we were working with a schematic editor. When we place a 
component on the sheet, it is said that we create an instance of that 
component with a label Un (where n is an integer). That instance is 
independent of all others, and internally, has its own state (output 
state of all its logic gates).</p>
<p>The VHDL equivalent of placing a component on a schematic sheet is to instantiate it as follows (after the begin statement):</p>
<pre class="lang:default highlight:0 decode:true"> --Instantiate a component of type comp1
 u1: comp1 PORT MAP (
   A =&gt; AA,
   B =&gt; BB,
   C =&gt; CC,
   Y =&gt; YY
 );</pre>
<p>What this means is:</p>
<ul>
<li>A component u1 shall be created</li>
<li>This component being instantiated has the entity name <strong>comp1</strong>&nbsp;(as declared above)</li>
<li>The input signals of this entity A,B and C are connected to signals AA, BB and CC respectively</li>
<li>The output signal Y is connected to the signal YY</li>
</ul>
<p>Put briefly, any changes made to the internal signals AA, BB and CC 
are applied to the inputs of component u1. Any changes in the output of 
this component will be observable via the signal YY.</p>
<h4>Create at least one process block</h4>
<p class="">The centre piece of any testbench is a process block. In 
this process block, you generate tests by asserting the test signals 
(AA,CC,BB) while observing the output (YY).</p>
<p>The general structure is as follows:</p>
<pre class="lang:default highlight:0 decode:true">process 
   --declarations
begin 
   --assert the input signal(s)
   --wait, then check the output signal(s)
 
   --End of test is to wait forever
   wait;
end process;</pre>
<p>This test bench is going to perform (almost)&nbsp;<strong>exhaustive testing</strong>,
 that is, it will present every possible valid binary state to the input
 of the component being testing. Let’s look at this specific example.</p>
<pre class="lang:default mark:10-12 highlight:0 decode:true">process 
	variable count : std_logic_vector(2 downto 0);
begin	
	--Exhaustive test
	for idx in 0 to 7 loop
		--Convert integer idx to std_logic
		count := std_logic_vector(to_unsigned(idx,3));

		--Assign internal signals to the individual bits of count
		AA &lt;= count(0);
		BB &lt;= count(1);
		CC &lt;= count(2);

		--Wait for 20ns (also prompts signals to update)
		wait for 20 ns;
	end loop;
	
	--End of test is to wait forever
	wait;
end process;</pre>
<p>Some key points to note from this:</p>
<ul>
<li>A for-loop is set up to present input values from 0..7 (000b..111b).</li>
<li>The variable idx has the type integer, so this is converted to std_logic_vector</li>
<li>Bit 0 of count is assigned to the internal signal AA (which in turn 
is connected to input A of the component being tested).&nbsp;Similar 
patterns for used for Bits 1 and 2</li>
<li>A wait of 20ns is then added for each iteration of the loop</li>
</ul>
<p><strong>The last point is critical if we wish to observe any changes in the output</strong>. Remember that unlike variables, signals are not updated until the end of a process block <strong>or</strong> until a wait statement is encountered. This is because a process block is said to update in zero time <em>unless</em> a wait statement is added.</p>
<p>Note that <strong>wait cannot be synthesised</strong>. Don’t be tempted to try to synthesise delays in VHDL using a wait statement! It is only for simulation.</p>
<p>Once the loop has completed, the process block waits forever. If all 
process blocks are waiting indefinitely, the simulation ends.</p>
<h2>Checking the Output with ModelSim</h2>
<p>Ok, so that’s covered the stimulus of the component inputs, but what 
about the output? So far, little reference has been made to the output. 
There are a few options available, starting with graphical inspection in
 ModelSim.</p>
<p>It’s a lot quicker to show than to write, so watch the following 
video. Make sure you select 1080p (HD) as some of the fonts are small.</p>
<p><iframe loading="lazy" title="ModelSimSimulation" width="750" height="563" src="https://www.youtube.com/embed/q_CnAr1TQag?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" style="max-width: 100%; max-height: 458px;"></iframe></p>
<p>While you are here, I suggest you also watch the following video which explains how to use project files.</p>
<p><iframe loading="lazy" title="ModelSimProjects" width="750" height="563" src="https://www.youtube.com/embed/NgItTInfU60?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" style="max-width: 100%; max-height: 458px;"></iframe></p>
<p>&nbsp;</p>
<p><a href="https://blogs.plymouth.ac.uk/embedded-systems/fpga-and-vhdl/test-benches/part-2-multiple-architectures/">Next</a>, we will look at testing architectures with multiple architectures.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
	</div><!-- .entry-content -->

	</article><!-- #post-32 -->
			</main><!-- #main -->
		</div><!-- #primary -->
	</div><!-- #content -->

	
	<footer id="colophon" class="site-footer">

				<div class="site-info">
			<div class="site-name">
									<div class="site-logo"><a href="https://blogs.plymouth.ac.uk/embedded-systems/" class="custom-logo-link" rel="home"><img width="300" height="64" src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/wordpress-logo.png" class="custom-logo" alt="Embedded Systems"></a></div>
							</div><!-- .site-name -->

			
			<div class="powered-by">
				Proudly powered by <a href="https://en-gb.wordpress.org/">WordPress</a>.			</div><!-- .powered-by -->

		</div><!-- .site-info -->
	</footer><!-- #colophon -->

</div><!-- #page -->

<script>document.body.classList.remove("no-js");</script>	<script>
	if ( -1 !== navigator.userAgent.indexOf( 'MSIE' ) || -1 !== navigator.appVersion.indexOf( 'Trident/' ) ) {
		document.body.classList.add( 'is-IE' );
	}
	</script>
	<script id="twenty-twenty-one-ie11-polyfills-js-after">
( Element.prototype.matches && Element.prototype.closest && window.NodeList && NodeList.prototype.forEach ) || document.write( '<script src="https://blogs.plymouth.ac.uk/embedded-systems/wp-content/themes/twentytwentyone/assets/js/polyfills.js?ver=1.5"></scr' + 'ipt>' );
</script>
<script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/primary-navigation.js" id="twenty-twenty-one-primary-navigation-script-js"></script>
<script src="Part%201%20%E2%80%93%20Testing%20a%20Single%20Architecture%20Component%20%E2%80%93%20Embedded%20Systems_files/responsive-embeds.js" id="twenty-twenty-one-responsive-embeds-script-js"></script>
		<script>
		/(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",(function(){var t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())}),!1);
		</script>
		


</body></html>